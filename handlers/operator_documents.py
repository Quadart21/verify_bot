from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from config import OPERATORS
from database.db import (
    get_pending_verifications,
    get_verification_data,
    set_verification_status,
    get_pending_verifications_count,
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.reply_operator import get_operator_menu
from keyboards.reply_user import get_retry_keyboard


def register_operator_documents(dp: Dispatcher):

    @dp.message_handler(lambda msg: msg.text.startswith("üìÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"), user_id=OPERATORS)
    async def show_documents_list(msg: types.Message, state: FSMContext):
        users = list(set(get_pending_verifications("new")))
        if not users:
            await msg.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for uid in users:
            kb.add(KeyboardButton(f"–ó–∞—è–≤–∫–∞: {uid}"))
        kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

        await state.set_state("awaiting_document_selection")
        await msg.answer("üë• –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=kb)

    @dp.message_handler(lambda msg: msg.text.startswith("–ó–∞—è–≤–∫–∞:"), state="awaiting_document_selection", user_id=OPERATORS)
    async def select_document_user(msg: types.Message, state: FSMContext):
        try:
            user_id = int(msg.text.replace("–ó–∞—è–≤–∫–∞:", "").strip())
        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        verification = get_verification_data(user_id)
        if not verification or not verification["doc_photo"]:
            await msg.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
            return

        await state.update_data(current_user=user_id)

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "üîô –ù–∞–∑–∞–¥")

        doc_path = verification["doc_photo"]
        selfie_path = verification["selfie_photo"]

        if doc_path.lower().endswith((".jpg", ".jpeg", ".png", ".webp")):
            await msg.bot.send_photo(msg.chat.id, open(doc_path, "rb"), caption="üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
        else:
            await msg.bot.send_document(msg.chat.id, open(doc_path, "rb"), caption="üìÑ –ü–∞—Å–ø–æ—Ä—Ç")

        if selfie_path.lower().endswith((".jpg", ".jpeg", ".png", ".webp")):
            await msg.bot.send_photo(msg.chat.id, open(selfie_path, "rb"), caption="ü§≥ –°–µ–ª—Ñ–∏")
        else:
            await msg.bot.send_document(msg.chat.id, open(selfie_path, "rb"), caption="ü§≥ –°–µ–ª—Ñ–∏")

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        await state.set_state("processing_document_user")

    @dp.message_handler(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", state="processing_document_user", user_id=OPERATORS)
    async def approve_docs(msg: types.Message, state: FSMContext):
        data = await state.get_data()
        user_id = data["current_user"]
        set_verification_status(user_id, "docs_ok")
        await msg.bot.send_message(user_id, "‚úÖ –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–¥–æ–±—Ä–µ–Ω—ã. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        await state.finish()
        counts = {
            "docs": get_pending_verifications_count("new"),
            "requisites": get_pending_verifications_count("docs_ok"),
            "payments": get_pending_verifications_count("paid_waiting"),
            "videos": get_pending_verifications_count("video_waiting"),
        }
        await msg.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(counts))

    @dp.message_handler(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", state="processing_document_user", user_id=OPERATORS)
    async def reject_docs_start(msg: types.Message, state: FSMContext):
        await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:")
        await state.set_state("awaiting_document_reject_reason")

    @dp.message_handler(state="awaiting_document_reject_reason", user_id=OPERATORS)
    async def reject_docs_finish(msg: types.Message, state: FSMContext):
        reason = msg.text
        data = await state.get_data()
        user_id = data["current_user"]

        set_verification_status(user_id, "rejected", reason)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        await msg.bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ?",
            reply_markup=get_retry_keyboard("üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ")
        )

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—Ç –ø–∞–Ω–µ–ª–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await state.finish()
        counts = {
            "docs": get_pending_verifications_count("new"),
            "requisites": get_pending_verifications_count("docs_ok"),
            "payments": get_pending_verifications_count("paid_waiting"),
            "videos": get_pending_verifications_count("video_waiting"),
        }
        await msg.answer("üìõ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(counts))


    @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state="*", user_id=OPERATORS)
    async def go_back(msg: types.Message, state: FSMContext):
        await state.finish()
        counts = {
            "docs": get_pending_verifications_count("new"),
            "requisites": get_pending_verifications_count("docs_ok"),
            "payments": get_pending_verifications_count("paid_waiting"),
            "videos": get_pending_verifications_count("video_waiting"),
        }
        await msg.answer("‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(counts))