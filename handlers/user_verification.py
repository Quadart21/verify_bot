from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher

from states.verification import VerificationFSM
from keyboards.reply_common import cancel_keyboard
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.reply_user import get_user_menu
from utils.notifier import notify_group
from utils.media_saver import save_file
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import (
    create_verification,
    update_verification,
    set_verification_status,
    get_verification_status,
    is_verified
)


def get_continue_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
        KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    )


def get_retry_keyboard(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥"):
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text),
        KeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ")
    )


def register_user_verification(dp: Dispatcher):

    @dp.message_handler(text="‚úÖ –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
    async def start_verification(msg: types.Message, state: FSMContext):
        create_verification(msg.from_user.id)
        await msg.answer(
            "üëÄ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç –æ–±—è–∑–∞–Ω –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\nü§´ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç: \n\n- –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞\n- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n- –≤–∏–¥–µ–æ-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
            reply_markup=get_continue_keyboard()
        )
        await VerificationFSM.waiting_agreement.set()


    @dp.message_handler(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", state="*")
    async def handle_support_request(msg: types.Message, state: FSMContext):
        await state.finish()

        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîó –û–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/bitcoinbox_support")
        )

        await msg.answer(
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∏–º–∏ –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω. –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.",
            reply_markup=keyboard
        )

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_menu(is_verified(msg.from_user.id)))


    @dp.message_handler(text="‚ùå –û—Ç–º–µ–Ω–∞", state="*")
    async def handle_cancel(msg: types.Message, state: FSMContext):
        await state.finish()

        await msg.answer(
            "‚ùå –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ.",
            reply_markup=get_user_menu(is_verified(msg.from_user.id))
        )

    @dp.message_handler(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=VerificationFSM.waiting_agreement)
    async def step_agreement(msg: types.Message, state: FSMContext):
        await msg.answer(
            "‚ö†Ô∏è –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ö –ü–†–û–ß–¢–ï–ù–ò–Æ :\n\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å –ª–∏—á–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏—Ü–∞\n"
            "‚Ä¢ –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ = –≤–æ–∑–≤—Ä–∞—Ç —Å –∫–æ–º–∏—Å—Å–∏–µ–π\n"
            "‚Ä¢ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–º–∞–Ω–∞ = –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
            "üö® –í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø üö®\n\n"
            "–°–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω–æ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Å—Ö–µ–º—ã, –≥–¥–µ –º–æ—à–µ–Ω–Ω–∏–∫–∏ –æ–±–º–∞–Ω–æ–º –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –ª—é–¥–µ–π –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –µ—ë –∏–º. –ë—É–¥—å—Ç–µ –±–¥–∏—Ç–µ–ª—å–Ω—ã!\n\n"
            "üëé –ö–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:\n"
            "‚Ä¢ –í–∞–º –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å —è–∫–æ–±—ã –≤—ã—Å–æ–∫–∏–º –¥–æ—Ö–æ–¥–æ–º –∏ –ø—Ä–æ—Å—è—Ç –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ.\n"
            "‚Ä¢ –û–±–µ—â–∞—é—Ç –±—ã—Å—Ç—Ä—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É—Å–∏–ª–∏—è, –Ω–æ –ø—Ä–æ—Å—è—Ç —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—Ä–∏–ø—Ç—É.\n"
            "‚Ä¢ –ó–∞–≤–ª–µ–∫–∞—é—Ç –≤ —Å–µ—Ç–µ–≤–æ–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–∏—Ä–∞–º–∏–¥—É.\n"
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞—é—Ç –Ω–∞ ‚Äú—Ä–∞–±–æ—Ç—É –∫–∞—Å—Å–∏—Ä–æ–º‚Äù, –≥–¥–µ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –∫—Ä–∏–ø—Ç—É –æ—Ç —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏.\n\n"
            "üõ° –ü–æ–∫—É–ø–∞–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è –∏ —Ç–æ–ª—å–∫–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ!",
            reply_markup=get_continue_keyboard()
        )
        await VerificationFSM.waiting_warning_ack.set()

    @dp.message_handler(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=VerificationFSM.waiting_warning_ack)
    async def step_warning(msg: types.Message, state: FSMContext):
        with open("img/2.jpg", "rb") as photo1:
            await msg.answer_photo(photo=photo1, caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä N1 ‚Äî –ü–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏")
        with open("img/1.jpg", "rb") as photo2:
            await msg.answer_photo(photo=photo2, caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä N2 ‚Äî –°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤ —Ä—É–∫–∞—Ö. –õ–∏—Ü–æ –∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω—ã")

        await msg.answer(
            "–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n"
            "- –§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ ID + –∑–∞—è–≤–∫–∞\n"
            "- –°–µ–ª—Ñ–∏ —Å —ç—Ç–∏–º –∂–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º",
            reply_markup=cancel_keyboard
        )
        await VerificationFSM.waiting_documents.set()

    @dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT], state=VerificationFSM.waiting_documents)
    async def step_documents(msg: types.Message, state: FSMContext):
        data = await state.get_data()
        file = msg.photo[-1] if msg.photo else msg.document
        file_id = file.file_id

        if "doc_photo" not in data:
            path = await save_file(msg.bot, file_id, "docs", msg.from_user.id)
            await state.update_data(doc_photo=path)
            await msg.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏.", reply_markup=cancel_keyboard)
            return

        selfie_path = await save_file(msg.bot, file_id, "docs", msg.from_user.id)
        doc_path = data["doc_photo"]

        update_verification(msg.from_user.id, "doc_photo", doc_path)
        update_verification(msg.from_user.id, "selfie_photo", selfie_path)
        set_verification_status(msg.from_user.id, "new")

        await msg.answer("üì¨ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=types.ReplyKeyboardRemove())
        await notify_group(msg.bot, f"üìÑ –ö–ª–∏–µ–Ω—Ç {msg.from_user.id} –∑–∞–≥—Ä—É–∑–∏–ª –ø–∞—Å–ø–æ—Ä—Ç.", user_id=msg.from_user.id)
        await state.finish()

    @dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT], state=VerificationFSM.waiting_payment_proof)
    async def step_payment(msg: types.Message, state: FSMContext):
        file = msg.photo[-1] if msg.photo else msg.document
        file_id = file.file_id
        path = await save_file(msg.bot, file_id, "payments", msg.from_user.id)
        update_verification(msg.from_user.id, "payment_proof", path)
        set_verification_status(msg.from_user.id, "paid_waiting")
        await msg.answer("üì§ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await notify_group(msg.bot, f"üíµ –ö–ª–∏–µ–Ω—Ç {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.", user_id=msg.from_user.id)
        await state.finish()

    @dp.message_handler(content_types=[types.ContentType.VIDEO, types.ContentType.DOCUMENT], state=VerificationFSM.waiting_video)
    async def step_video(msg: types.Message, state: FSMContext):
        file = msg.video or msg.document
        file_id = file.file_id
        path = await save_file(msg.bot, file_id, "videos", msg.from_user.id)
        update_verification(msg.from_user.id, "video", path)
        set_verification_status(msg.from_user.id, "video_waiting")
        await msg.answer("üì§ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await notify_group(msg.bot, f"üé• –ö–ª–∏–µ–Ω—Ç {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.", user_id=msg.from_user.id)
        await state.finish()

    # ==== –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —à–∞–≥–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ ====

    @dp.message_handler(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ")
    async def retry_documents(msg: types.Message, state: FSMContext):
        await state.finish()
        await state.reset_data()

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        update_verification(msg.from_user.id, "doc_photo", "")
        update_verification(msg.from_user.id, "selfie_photo", "")
        set_verification_status(msg.from_user.id, "draft")

        with open("img/2.jpg", "rb") as photo1:
            await msg.answer_photo(photo=photo1, caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä N1 ‚Äî –ü–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏")
        with open("img/1.jpg", "rb") as photo2:
            await msg.answer_photo(photo=photo2, caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä N2 ‚Äî –°–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤ —Ä—É–∫–∞—Ö")

        await msg.answer(
            "üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n"
            "- –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ ID)\n"
            "- –ó–∞—Ç–µ–º ‚Äî —Å–µ–ª—Ñ–∏ —Å –Ω–∏–º",
            reply_markup=cancel_keyboard
        )
        await VerificationFSM.waiting_documents.set()

    @dp.message_handler(text="üíµ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –∑–∞–Ω–æ–≤–æ")
    async def retry_payment(msg: types.Message, state: FSMContext):
        await state.finish()
        await state.reset_data()

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —á–µ–∫–∞
        update_verification(msg.from_user.id, "payment_proof", "")
        set_verification_status(msg.from_user.id, "draft")

        await msg.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞.\n–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞:", reply_markup=cancel_keyboard)
        await VerificationFSM.waiting_payment_proof.set()

    @dp.message_handler(text="üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ")
    async def retry_video(msg: types.Message, state: FSMContext):
        await state.finish()
        await state.reset_data()

        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –≤–∏–¥–µ–æ
        update_verification(msg.from_user.id, "video", "")
        set_verification_status(msg.from_user.id, "draft")

        await msg.answer("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ.\n–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.", reply_markup=cancel_keyboard)
        await VerificationFSM.waiting_video.set()

    @dp.message_handler(text="üè† –í –Ω–∞—á–∞–ª–æ")
    async def back_to_start(msg: types.Message, state: FSMContext):
        await state.finish()
        await msg.answer(
            "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"))
        )

    @dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT])
    async def fallback_payment_handler(msg: types.Message):
        user_id = msg.from_user.id
        status = get_verification_status(user_id)

        # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–Ω–µ FSM –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ paid_waiting
        if status != "paid_waiting":
            return

        file = msg.photo[-1] if msg.photo else msg.document
        file_id = file.file_id
        path = await save_file(msg.bot, file_id, "payments", user_id)

        update_verification(user_id, "payment_proof", path)

        await msg.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
        await notify_group(msg.bot, f"üíµ –ö–ª–∏–µ–Ω—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫.", user_id=user_id)

    @dp.message_handler(content_types=[types.ContentType.VIDEO, types.ContentType.DOCUMENT])
    async def fallback_video_handler(msg: types.Message):
        user_id = msg.from_user.id
        status = get_verification_status(user_id)

        if status != "video_waiting":
            return

        file = msg.video or msg.document
        file_id = file.file_id
        path = await save_file(msg.bot, file_id, "videos", user_id)

        update_verification(user_id, "video", path)

        await msg.answer("üì§ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await notify_group(msg.bot, f"üé• –ö–ª–∏–µ–Ω—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ.", user_id=user_id)
