from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher

from states.verification import VerificationFSM
from keyboards.reply_common import cancel_keyboard
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.reply_user import get_user_menu
from utils.notifier import notify_group
from utils.media_saver import save_file
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import (
    create_verification,
    update_verification,
    set_verification_status,
    get_verification_status,
    is_verified
)

def get_valid_payment_file(msg: types.Message):
    if msg.photo:
        return msg.photo[-1]
    if msg.document:
        mime = msg.document.mime_type or ""
        if mime.startswith("image/") or mime == "application/pdf":
            return msg.document
    return None



def get_continue_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"),
        KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    )


def get_retry_keyboard(text="üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —à–∞–≥"):
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton(text),
        KeyboardButton("üè† –í –Ω–∞—á–∞–ª–æ")
    )

def get_submit_reply_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"),
        KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    )


def register_user_verification(dp: Dispatcher):

    @dp.message_handler(commands="debug")
    async def debug(msg: types.Message, state: FSMContext):
        current = await state.get_state()
        await msg.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current}")


    @dp.message_handler(text="‚úÖ –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
    async def start_verification(msg: types.Message, state: FSMContext):
        create_verification(msg.from_user.id)

        await msg.answer(
            "üëÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏!\n\n"
            "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –º—ã —Å–º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ª–∏—á–Ω–æ—Å—Ç–∏.\n\n"
            "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞.\n\n"
            "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "1. –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ ID)\n"
            "2. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n"
            "3. –í–∏–¥–µ–æ-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n"
            "‚è≠ –ù–∞–∂–º–∏—Ç–µ ¬´‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_continue_keyboard()
        )
        await VerificationFSM.waiting_agreement.set()

    @dp.message_handler(text="–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", state="*")
    async def handle_support_request(msg: types.Message, state: FSMContext):
        await state.finish()

        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîó –û–Ω–ª–∞–π–Ω-–ø–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/bitcoinbox_support")
        )

        await msg.answer(
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ ‚Äî –Ω–µ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∏–º–∏ –æ–¥–∏–Ω –Ω–∞ –æ–¥–∏–Ω. –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º.",
            reply_markup=keyboard
        )

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_menu(is_verified(msg.from_user.id)))


    @dp.message_handler(text="‚ùå –û—Ç–º–µ–Ω–∞", state="*")
    async def handle_cancel(msg: types.Message, state: FSMContext):
        await state.finish()

        await msg.answer(
            "‚ùå –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ.",
            reply_markup=get_user_menu(is_verified(msg.from_user.id))
        )


    @dp.message_handler(text="‚úÖ –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
    async def start_verification(msg: types.Message, state: FSMContext):
        create_verification(msg.from_user.id)
        await msg.answer(
            "üëÄ –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø\n\n–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Ä–µ–¥—Å—Ç–≤ –∫–ª–∏–µ–Ω—Ç –æ–±—è–∑–∞–Ω –ø—Ä–æ–π—Ç–∏ –ø–æ–ª–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. –≠—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.\n\nü§´ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç:\n- –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞\n- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n- –≤–∏–¥–µ–æ-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è",
            reply_markup=get_continue_keyboard()
        )
        await VerificationFSM.waiting_agreement.set()

    @dp.message_handler(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=VerificationFSM.waiting_agreement)
    async def step_agreement(msg: types.Message, state: FSMContext):
        await msg.answer(
            f"‚ö†Ô∏è {msg.from_user.first_name}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º:\n\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è **—Ç–æ–ª—å–∫–æ —Å –ª–∏—á–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü**\n"
            "‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è **—Ç–æ–ª—å–∫–æ –æ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞**\n"
            "‚Ä¢ –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ ‚Äî —ç—Ç–æ **–≤–æ–∑–≤—Ä–∞—Ç —Å –∫–æ–º–∏—Å—Å–∏–µ–π**\n"
            "‚Ä¢ –õ—é–±–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ–±–º–∞–Ω–∞ ‚Äî **–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è**\n\n"
            "üö® –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –º–æ—à–µ–Ω–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ö–µ–º—ã. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å—Ä–µ–¥—Å—Ç–≤.",
            reply_markup=get_continue_keyboard(),
            parse_mode="Markdown"
        )
        await VerificationFSM.waiting_warning_ack.set()

    @dp.message_handler(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=VerificationFSM.waiting_warning_ack)
    async def step_warning(msg: types.Message, state: FSMContext):
        # –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ —Å–µ–ª—Ñ–∏ ‚Äî –∞–ª—å–±–æ–º–æ–º
        media = [
            types.InputMediaPhoto(types.InputFile("img/2.jpg"), caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä ‚Ññ1 ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏"),
            types.InputMediaPhoto(types.InputFile("img/1.jpg"), caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä ‚Ññ2 ‚Äî —Å–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤ —Ä—É–∫–∞—Ö"),
        ]
        await msg.bot.send_media_group(chat_id=msg.chat.id, media=media)

        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        await msg.answer(
            "üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ **1 –∏–ª–∏ 2 —Ñ–∞–π–ª–∞** (–ø–∞—Å–ø–æ—Ä—Ç –∏ —Å–µ–ª—Ñ–∏) **–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –∫–∞–∫ –∞–ª—å–±–æ–º**.\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ —Ñ–æ—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            "‚Ä¢ –≤–∏–¥–µ–æ\n\n"
            "‚ùóÔ∏è–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ 2 —Ñ–∞–π–ª–∞ ‚Äî –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–º–µ—Å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=cancel_keyboard,
            parse_mode="Markdown"
        )


        
        await state.update_data(collected_docs=[])
        await VerificationFSM.waiting_documents.set()


    @dp.message_handler(lambda m: m.text and "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã" in m.text.lower(), state=VerificationFSM.waiting_documents)
    async def submit_documents(msg: types.Message, state: FSMContext):
        print(f"[DEBUG] –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –æ—Ç {msg.from_user.id}, —Ç–µ–∫—Å—Ç: {msg.text!r}")
        print(f"[DEBUG] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {await state.get_state()}")

        data = await state.get_data()
        files = data.get("collected_docs", [])

        if not files:
            await msg.answer("‚ö†Ô∏è –í—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
            return

        user_id = msg.from_user.id
        path1 = await save_file(msg.bot, files[0], "docs", user_id)
        path2 = await save_file(msg.bot, files[1], "docs", user_id) if len(files) > 1 else path1

        update_verification(user_id, "doc_photo", path1)
        update_verification(user_id, "selfie_photo", path2)
        set_verification_status(user_id, "new")

        await msg.answer("üì¨ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–∏–Ω—è—Ç—ã. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=types.ReplyKeyboardRemove())
        await notify_group(msg.bot, f"üìÑ –ö–ª–∏–µ–Ω—Ç {user_id} –∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã.", user_id=user_id)

        await state.finish()
        print(f"[DEBUG] –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –î–æ–∫—É–º–µ–Ω—Ç—ã {user_id} –ø–µ—Ä–µ–¥–∞–Ω—ã.")

    @dp.message_handler(content_types=types.ContentType.ANY, state=VerificationFSM.waiting_documents)
    async def collect_docs(msg: types.Message, state: FSMContext):
        # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É "üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"
        if msg.text and "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã" in msg.text.lower():
            return

        file = msg.photo[-1] if msg.photo else msg.document or msg.video
        if not file:
            await msg.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
            return

        data = await state.get_data()
        files = data.get("collected_docs", [])

        if len(files) >= 2:
            await msg.answer("‚ö†Ô∏è –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–∫—Å–∏–º—É–º 2 —Ñ–∞–π–ª–∞.")
            return

        files.append(file.file_id)
        await state.update_data(collected_docs=files)

        await msg.answer(
            "‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ö–æ–≥–¥–∞ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
            reply_markup=get_submit_reply_keyboard()
        )


    @dp.message_handler(content_types=types.ContentType.ANY, state=VerificationFSM.waiting_payment_proof)
    async def step_payment(msg: types.Message, state: FSMContext):
        allowed_types = (
            msg.photo[-1] if msg.photo else None,
            msg.document,
            msg.video,
            msg.video_note,
        )

        file = next((f for f in allowed_types if f), None)

        if not file:
            await msg.answer(
                "‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.",
                reply_markup=cancel_keyboard
            )
            return

        try:
            file_id = file.file_id
            path = await save_file(msg.bot, file_id, "payments", msg.from_user.id)

            update_verification(msg.from_user.id, "payment_proof", path)
            set_verification_status(msg.from_user.id, "paid_waiting")

            await msg.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await notify_group(msg.bot, f"üíµ –ö–ª–∏–µ–Ω—Ç {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.", user_id=msg.from_user.id)

            await state.finish()
        except Exception as e:
            await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑.")
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")


    @dp.message_handler(content_types=types.ContentType.ANY, state=VerificationFSM.waiting_video)
    async def step_video(msg: types.Message, state: FSMContext):
        if msg.video:
            file = msg.video
        elif msg.video_note:
            file = msg.video_note
        elif msg.document and msg.document.mime_type and msg.document.mime_type.startswith("video/"):
            file = msg.document
        else:
            file = None

        if not file:
            await msg.answer(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–≤–∏–¥–µ–æ-—Ñ–∞–π–ª** (–∫–∞–∫ –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç).\n"
                "–§–æ—Ç–æ, –∞—É–¥–∏–æ –∏ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.",
                reply_markup=cancel_keyboard,
                parse_mode="Markdown"
            )
            return

        try:
            file_id = file.file_id
            path = await save_file(msg.bot, file_id, "videos", msg.from_user.id)

            update_verification(msg.from_user.id, "video", path)
            set_verification_status(msg.from_user.id, "video_waiting")

            await msg.answer("üì§ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await notify_group(msg.bot, f"üé• –ö–ª–∏–µ–Ω—Ç {msg.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.", user_id=msg.from_user.id)

            await state.finish()

        except Exception as e:
            await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
            print(f"[ERROR step_video]: {e}")


    # ==== –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ —à–∞–≥–∏ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ ====

    @dp.message_handler(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–Ω–æ–≤–æ")
    async def retry_documents(msg: types.Message, state: FSMContext):
        await state.finish()
        await state.reset_data()

        update_verification(msg.from_user.id, "doc_photo", "")
        update_verification(msg.from_user.id, "selfie_photo", "")
        set_verification_status(msg.from_user.id, "draft")

        media = [
            types.InputMediaPhoto(types.InputFile("img/2.jpg"), caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä ‚Ññ1 ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ —Å –æ—Ç–∫—Ä—ã—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π –∏ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏"),
            types.InputMediaPhoto(types.InputFile("img/1.jpg"), caption="–§–æ—Ç–æ-–ø—Ä–∏–º–µ—Ä ‚Ññ2 ‚Äî —Å–µ–ª—Ñ–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –≤ —Ä—É–∫–∞—Ö"),
        ]
        await msg.bot.send_media_group(chat_id=msg.chat.id, media=media)

        await msg.answer(
            "üì∏ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ **1 –∏–ª–∏ 2 —Ñ–∞–π–ª–∞** (–ø–∞—Å–ø–æ—Ä—Ç –∏ —Å–µ–ª—Ñ–∏) **–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –∫–∞–∫ –∞–ª—å–±–æ–º**.\n\n"
            "–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ —Ñ–æ—Ç–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
            "‚Ä¢ –≤–∏–¥–µ–æ\n\n"
            "‚ùóÔ∏è–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ 2 —Ñ–∞–π–ª–∞ ‚Äî –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–º–µ—Å—Ç–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            reply_markup=cancel_keyboard,
            parse_mode="Markdown"
        )

        await state.update_data(collected_docs=[])
        await VerificationFSM.waiting_documents.set()


    @dp.message_handler(text="üíµ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –∑–∞–Ω–æ–≤–æ")
    async def retry_payment(msg: types.Message, state: FSMContext):
        await state.finish()
        await state.reset_data()

        update_verification(msg.from_user.id, "payment_proof", "")
        set_verification_status(msg.from_user.id, "draft")

        await msg.answer(
            "üì§ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞:\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ **–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –≤–∏–¥–µ–æ**, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É.\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
            "‚Ä¢ —Å–∫—Ä–∏–Ω –∏–∑ –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–∞\n"
            "‚Ä¢ –ø–ª–∞—Ç—ë–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ\n"
            "‚Ä¢ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏\n\n"
            "‚ùóÔ∏è–í–∞–∂–Ω–æ: –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á—ë—Ç–∫–æ –≤–∏–¥–Ω—ã:\n"
            "‚Äî –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
            "‚Äî –°—á—ë—Ç\n"
            "‚Äî –°—É–º–º–∞\n"
            "‚Äî –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–µ—Ä–µ–≤–æ–¥–∞",
            reply_markup=cancel_keyboard
        )

        await VerificationFSM.waiting_payment_proof.set()

    @dp.message_handler(text="üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ")
    async def retry_video(msg: types.Message, state: FSMContext):
        await state.finish()
        await state.reset_data()

        update_verification(msg.from_user.id, "video", "")
        set_verification_status(msg.from_user.id, "draft")

        await msg.answer(
            "üìπ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ.\n\n"
            "–ó–∞–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ, –≥–¥–µ –≤—ã:\n"
            "‚Ä¢ –¥–µ—Ä–∂–∏—Ç–µ –≤ —Ä—É–∫–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –∏ –ª–∏—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –æ–±–º–µ–Ω–∞,\n"
            "‚Ä¢ –ø—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ –≤—Å–ª—É—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
            "‚ö†Ô∏è –£—Å–ª–æ–≤–∏—è:\n"
            "‚Ä¢ –≤ –∫–∞–¥—Ä–µ —Ç–æ–ª—å–∫–æ –≤—ã\n"
            "‚Ä¢ —á—ë—Ç–∫–æ–µ –ª–∏—Ü–æ –∏ –¥–æ–∫—É–º–µ–Ω—Ç\n"
            "‚Ä¢ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –º–æ–Ω—Ç–∞–∂–∞\n"
            "‚Ä¢ –≤–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –¥–µ–Ω—å –∑–∞–ø–∏—Å–∏.",
            reply_markup=cancel_keyboard
        )

        await VerificationFSM.waiting_video.set()


        @dp.message_handler(text="üè† –í –Ω–∞—á–∞–ª–æ")
        async def back_to_start(msg: types.Message, state: FSMContext):
            await state.finish()
            await msg.answer(
                "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:",
                reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚úÖ –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"))
            )

        @dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT])
        async def fallback_payment_handler(msg: types.Message):
            user_id = msg.from_user.id
            status = get_verification_status(user_id)

            # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–Ω–µ FSM –∑–∞–≥—Ä—É–∑–∫—É —á–µ–∫–∞, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ paid_waiting
            if status != "paid_waiting":
                return

            file = msg.photo[-1] if msg.photo else msg.document
            file_id = file.file_id
            path = await save_file(msg.bot, file_id, "payments", user_id)

            update_verification(user_id, "payment_proof", path)

            await msg.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            await notify_group(msg.bot, f"üíµ –ö–ª–∏–µ–Ω—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —á–µ–∫.", user_id=user_id)

        @dp.message_handler(content_types=[types.ContentType.VIDEO, types.ContentType.DOCUMENT])
        async def fallback_video_handler(msg: types.Message):
            user_id = msg.from_user.id
            status = get_verification_status(user_id)

            if status != "video_waiting":
                return

            file = msg.video or msg.document
            file_id = file.file_id
            path = await save_file(msg.bot, file_id, "videos", user_id)

            update_verification(user_id, "video", path)

            await msg.answer("üì§ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            await notify_group(msg.bot, f"üé• –ö–ª–∏–µ–Ω—Ç {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ.", user_id=user_id)
