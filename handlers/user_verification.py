from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from states.verification import VerificationFSM
from keyboards.reply_common import cancel_keyboard
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from database.db import (
    create_verification,
    update_verification,
    set_verification_status,
    get_verification_status
)
from utils.media_saver import save_file


def get_continue_keyboard():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"),
        KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")
    )


def register_user_verification(dp: Dispatcher):

    @dp.message_handler(text="‚úÖ –ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
    async def start_verification(msg: types.Message, state: FSMContext):
        create_verification(msg.from_user.id)
        await msg.answer(
            "üîê –ü–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n–í—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
            reply_markup=get_continue_keyboard()
        )
        await VerificationFSM.waiting_agreement.set()

    @dp.message_handler(text="‚ùå –û—Ç–º–µ–Ω–∞", state="*")
    async def cancel_process(msg: types.Message, state: FSMContext):
        await state.finish()
        await msg.answer("‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())

    @dp.message_handler(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=VerificationFSM.waiting_agreement)
    async def step_agreement(msg: types.Message, state: FSMContext):
        await msg.answer(
            "‚ö†Ô∏è –í–∞–∂–Ω–æ: –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.\n–ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –º–æ—à–µ–Ω–Ω–∏–∫–∞–º–∏.",
            reply_markup=get_continue_keyboard()
        )
        await VerificationFSM.waiting_warning_ack.set()

    @dp.message_handler(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=VerificationFSM.waiting_warning_ack)
    async def step_warning(msg: types.Message, state: FSMContext):
        await msg.answer(
            "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ:\n\n1. –§–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –Ω–∞–¥–ø–∏—Å—å—é '–î–ª—è –æ–±–º–µ–Ω–∞'\n2. –°–µ–ª—Ñ–∏ —Å —ç—Ç–∏–º –ø–∞—Å–ø–æ—Ä—Ç–æ–º.",
            reply_markup=cancel_keyboard
        )
        await VerificationFSM.waiting_documents.set()

    @dp.message_handler(content_types=types.ContentType.PHOTO, state=VerificationFSM.waiting_documents)
    async def step_documents(msg: types.Message, state: FSMContext):
        data = await state.get_data()

        if "doc_photo" not in data:
            file_id = msg.photo[-1].file_id
            path = await save_file(msg.bot, file_id, "docs")
            await state.update_data(doc_photo=path)
            await msg.answer("‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏.", reply_markup=cancel_keyboard)
            return

        file_id = msg.photo[-1].file_id
        selfie_path = await save_file(msg.bot, file_id, "docs")
        doc_path = data["doc_photo"]

        update_verification(msg.from_user.id, "doc_photo", doc_path)
        update_verification(msg.from_user.id, "selfie_photo", selfie_path, "new")

        await msg.answer("üì¨ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=types.ReplyKeyboardRemove())
        await state.finish()

    @dp.message_handler(content_types=types.ContentType.PHOTO, state=VerificationFSM.waiting_payment_proof)
    async def step_payment(msg: types.Message, state: FSMContext):
        file_id = msg.photo[-1].file_id
        path = await save_file(msg.bot, file_id, "payments")
        update_verification(msg.from_user.id, "payment_proof", path, "paid_waiting")
        await msg.answer("üì§ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await state.finish()

    @dp.message_handler(content_types=types.ContentType.VIDEO, state=VerificationFSM.waiting_video)
    async def step_video(msg: types.Message, state: FSMContext):
        file_id = msg.video.file_id
        path = await save_file(msg.bot, file_id, "videos")
        update_verification(msg.from_user.id, "video", path, "video_waiting")
        await msg.answer("üì§ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await state.finish()

    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —á–µ–∫–∞
    @dp.message_handler(content_types=types.ContentType.PHOTO)
    async def fallback_payment_handler(msg: types.Message):
        user_id = msg.from_user.id
        status = get_verification_status(user_id)
        if status != "paid_waiting":
            return

        path = await save_file(msg.bot, msg.photo[-1].file_id, "payments")
        update_verification(user_id, "payment_proof", path, "paid_waiting")
        await msg.answer("‚úÖ –ß–µ–∫ –ø–æ–ª—É—á–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

    # –†–µ–∑–µ—Ä–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
    @dp.message_handler(content_types=types.ContentType.VIDEO)
    async def fallback_video_handler(msg: types.Message):
        user_id = msg.from_user.id
        status = get_verification_status(user_id)
        if status != "video_waiting":
            return

        path = await save_file(msg.bot, msg.video.file_id, "videos")
        update_verification(user_id, "video", path, "video_waiting")
        await msg.answer("üì§ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")