from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from database.db import (
    create_verification,
    update_verification,
    set_verification_status,
    get_all_requisites,
    is_verified
)
from utils.media_saver import save_file


def register_direct_request(dp: Dispatcher):

    @dp.message_handler(text="üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã")
    async def request_requisites_direct(msg: types.Message, state: FSMContext):
        user_id = msg.from_user.id
        if not is_verified(user_id):
            await msg.answer("‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return

        create_verification(user_id)
        set_verification_status(user_id, "docs_ok", is_direct=True)  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å (–±–µ–∑ –≤–∏–¥–µ–æ)

        requisites = get_all_requisites()
        if not requisites:
            await msg.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for r in requisites:
            kb.add(KeyboardButton(r[1]))
        kb.add(KeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"))

        await state.set_state("choose_direct_requisite")
        await msg.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)

    @dp.message_handler(state="choose_direct_requisite")
    async def select_direct_requisite(msg: types.Message, state: FSMContext):
        label = msg.text
        if label == "üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
            await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä—É—á–Ω—É—é:")
            await state.set_state("manual_direct_requisite")
            return

        for r in get_all_requisites():
            if r[1] == label:
                await msg.answer(
                    f"üì® –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n{r[2]}\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
                    reply_markup=types.ReplyKeyboardRemove()
                )
                await state.set_state("waiting_direct_payment_proof")
                return

        await msg.answer("‚ö†Ô∏è –†–µ–∫–≤–∏–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    @dp.message_handler(state="manual_direct_requisite")
    async def manual_direct_requisite(msg: types.Message, state: FSMContext):
        await msg.answer(
            f"üì® –†–µ–∫–≤–∏–∑–∏—Ç—ã:\n\n{msg.text}\n\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        await state.set_state("waiting_direct_payment_proof")

    @dp.message_handler(content_types=types.ContentType.PHOTO, state="waiting_direct_payment_proof")
    async def save_direct_payment_proof(msg: types.Message, state: FSMContext):
        path = await save_file(msg.bot, msg.photo[-1].file_id, "payments")
        update_verification(msg.from_user.id, "payment_proof", path, "paid_waiting")
        await msg.answer("üì§ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        await state.finish()
