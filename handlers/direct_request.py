from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from utils.notifier import notify_group

from database.db import (
    is_verified,
    get_verification_status,
    create_requisite_request
)


def register_direct_request(dp: Dispatcher):

    @dp.message_handler(text="üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã")
    async def request_requisites_direct(msg: types.Message, state: FSMContext):
        user_id = msg.from_user.id

        if not is_verified(user_id):
            await msg.answer("‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return

        current_status = get_verification_status(user_id)

        if current_status not in ("video_ok", "finished"):
            await msg.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        # –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        if not create_requisite_request(user_id):
            await msg.answer("‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.\n–û–∂–∏–¥–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        await msg.answer("üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–û–∂–∏–¥–∞–π—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã—à–ª–µ—Ç –∏—Ö –≤—Ä—É—á–Ω—É—é.")
        await notify_group(msg.bot, f"üì¨ –ö–ª–∏–µ–Ω—Ç {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

