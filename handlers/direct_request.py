from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from database.db import (
    create_verification,
    set_verification_status,
    is_verified,
    get_verification_status,
)


def register_direct_request(dp: Dispatcher):

    @dp.message_handler(text="üí≥ –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã")
    async def request_requisites_direct(msg: types.Message, state: FSMContext):
        user_id = msg.from_user.id

        if not is_verified(user_id):
            await msg.answer("‚ùå –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.")
            return

        current_status = get_verification_status(user_id)

        if current_status in ("docs_ok", "paid_waiting", "video_waiting"):
            await msg.answer("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –û–∂–∏–¥–∞–π—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
            return

        # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ—à—ë–ª —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å —Ä–∞–Ω–µ–µ
        create_verification(user_id)
        set_verification_status(user_id, "docs_ok", is_direct=True)

        await msg.answer("üì® –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n–û–∂–∏–¥–∞–π—Ç–µ, –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤—ã—à–ª–µ—Ç –∏—Ö –≤—Ä—É—á–Ω—É—é.")
