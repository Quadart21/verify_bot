from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from config import OPERATORS
from database.db import (
    get_pending_verifications,
    get_verification_data,
    get_verification_status,
    set_verification_status,
    get_pending_verifications_count
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.reply_operator import get_operator_menu


def register_operator_payments(dp: Dispatcher):

    @dp.message_handler(lambda msg: msg.text.startswith("üí≥ –í—ã–¥–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"), user_id=OPERATORS)
    async def show_requisites_list(msg: types.Message, state: FSMContext):
        queue = [
            uid for uid in get_pending_verifications("docs_ok")
            if get_verification_status(uid) == "docs_ok"
        ]
        if not queue:
            await msg.answer("üì≠ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for uid in queue:
            kb.add(KeyboardButton(f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {uid}"))
        kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        await state.set_state("awaiting_requisites_selection")
        await msg.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:", reply_markup=kb)

    @dp.message_handler(lambda msg: msg.text.startswith("–†–µ–∫–≤–∏–∑–∏—Ç—ã:"), state="awaiting_requisites_selection", user_id=OPERATORS)
    async def select_requisite_user(msg: types.Message, state: FSMContext):
        try:
            user_id = int(msg.text.replace("–†–µ–∫–≤–∏–∑–∏—Ç—ã:", "").strip())
        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        current_status = get_verification_status(user_id)
        if current_status != "docs_ok":
            await msg.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        await state.update_data(current_user=user_id)
        await msg.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä—É—á–Ω—É—é:")
        await state.set_state("awaiting_requisite_manual")

    @dp.message_handler(state="awaiting_requisite_manual", user_id=OPERATORS)
    async def enter_manual_requisite(msg: types.Message, state: FSMContext):
        user_id = (await state.get_data())["current_user"]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–¥–∞–Ω —Ä–µ–∫–≤–∏–∑–∏—Ç
        current_status = get_verification_status(user_id)
        if current_status != "docs_ok":
            await msg.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
            return

        set_verification_status(user_id, "paid_waiting")

        await msg.bot.send_message(
            user_id,
            f"üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n{msg.text}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
        )

        await state.finish()
        await msg.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))

    @dp.message_handler(lambda msg: msg.text.startswith("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"), user_id=OPERATORS)
    async def show_payment_list(msg: types.Message, state: FSMContext):
        queue = get_pending_verifications("paid_waiting")
        if not queue:
            await msg.answer("üì≠ –ù–µ—Ç –æ–ø–ª–∞—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for uid in queue:
            kb.add(KeyboardButton(f"–û–ø–ª–∞—Ç–∞: {uid}"))
        kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        await state.set_state("awaiting_payment_selection")
        await msg.answer("üíµ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=kb)

    @dp.message_handler(lambda msg: msg.text.startswith("–û–ø–ª–∞—Ç–∞:"), state="awaiting_payment_selection", user_id=OPERATORS)
    async def select_payment_user(msg: types.Message, state: FSMContext):
        try:
            user_id = int(msg.text.replace("–û–ø–ª–∞—Ç–∞:", "").strip())
        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        verification = get_verification_data(user_id)
        if not verification or not verification["payment_proof"]:
            await msg.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞.")
            return

        await state.update_data(current_user=user_id)

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", "üîô –ù–∞–∑–∞–¥")

        await msg.bot.send_photo(msg.chat.id, open(verification["payment_proof"], "rb"), caption="üíµ –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ")
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        await state.set_state("processing_payment_user")

    @dp.message_handler(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", state="processing_payment_user", user_id=OPERATORS)
    async def approve_payment(msg: types.Message, state: FSMContext):
        user_id = (await state.get_data())["current_user"]
        verification = get_verification_data(user_id)

        if verification and verification.get("video") == "SKIP":
            set_verification_status(user_id, "finished")
            await msg.bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ, –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–π—Ç–µ.")
        else:
            set_verification_status(user_id, "video_waiting")
            await msg.bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü—Ä–∏—à–ª–∏—Ç–µ –≤–∏–¥–µ–æ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")

        await state.finish()
        await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))

    @dp.message_handler(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", state="processing_payment_user", user_id=OPERATORS)
    async def reject_payment(msg: types.Message, state: FSMContext):
        await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:")
        await state.set_state("awaiting_payment_reject_reason")

    @dp.message_handler(state="awaiting_payment_reject_reason", user_id=OPERATORS)
    async def reject_payment_finish(msg: types.Message, state: FSMContext):
        reason = msg.text
        user_id = (await state.get_data())["current_user"]
        set_verification_status(user_id, "rejected", reason)
        await msg.bot.send_message(user_id, f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        await state.finish()
        await msg.answer("üìõ –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))

    @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state="*", user_id=OPERATORS)
    async def go_back(msg: types.Message, state: FSMContext):
        await state.finish()
        await msg.answer("‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))


def _get_counts():
    return {
        "docs": get_pending_verifications_count("new"),
        "requisites": get_pending_verifications_count("docs_ok"),
        "payments": get_pending_verifications_count("paid_waiting"),
        "videos": get_pending_verifications_count("video_waiting"),
    }
