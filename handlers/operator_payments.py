from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from states.verification import VerificationFSM
from config import OPERATORS
from database.db import (
    get_pending_verifications,
    get_verification_data,
    get_verification_status,
    set_verification_status,
    get_pending_verifications_count,
    get_pending_requisite_requests,
    mark_requisite_request_done,
    update_verification,
    is_verified
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.reply_operator import get_operator_menu
from keyboards.reply_user import get_retry_keyboard

def register_operator_payments(dp: Dispatcher): 

    @dp.message_handler(lambda msg: msg.text.startswith("üí≥ –í—ã–¥–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã"), user_id=OPERATORS)
    async def show_requisites_list(msg: types.Message, state: FSMContext):
        # –¢–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç—ã –Ω–∞ —ç—Ç–∞–ø–µ docs_ok –∏–ª–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        uids_requests = get_pending_requisite_requests()
        uids_waiting = get_pending_verifications("docs_ok")

        # –ò—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
        uids_waiting = list(set(uids_waiting) - set(uids_requests))
        queue = uids_requests + uids_waiting

        if not queue:
            await msg.answer("üì≠ –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for uid in queue:
            kb.add(KeyboardButton(f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: {uid}"))
        kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

        await state.set_state("awaiting_requisites_selection")
        await msg.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:", reply_markup=kb)

    @dp.message_handler(lambda msg: msg.text.startswith("–†–µ–∫–≤–∏–∑–∏—Ç—ã:"), state="awaiting_requisites_selection", user_id=OPERATORS)
    async def select_requisite_user(msg: types.Message, state: FSMContext):
        try:
            user_id = int(msg.text.replace("–†–µ–∫–≤–∏–∑–∏—Ç—ã:", "").strip())
        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        current_status = get_verification_status(user_id)
        if current_status not in ("docs_ok", "video_ok", "finished"):
            await msg.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        await state.update_data(current_user=user_id)
        await msg.answer("‚úç –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤—Ä—É—á–Ω—É—é:")
        await state.set_state("awaiting_requisite_manual")



    @dp.message_handler(state="awaiting_requisite_manual", user_id=OPERATORS)
    async def enter_manual_requisite(msg: types.Message, state: FSMContext):
        user_id = (await state.get_data())["current_user"]

        update_verification(user_id, "payment_proof", "", "paid_waiting")
        mark_requisite_request_done(user_id)

        await msg.bot.send_message(
            user_id,
            f"üì® –í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n\n{msg.text}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å:\n"
            "‚Ä¢ –ø–ª–∞—Ç—ë–∂–Ω–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ\n"
            "‚Ä¢ –æ–ø–µ—Ä–∞—Ü–∏—è –≤ –æ–Ω–ª–∞–π–Ω-–±–∞–Ω–∫–µ\n"
            "‚Ä¢ –∫–≤–∏—Ç–∞–Ω—Ü–∏—è —Å –±–∞–Ω–∫–æ–º–∞—Ç–∞\n\n"
            "‚ùóÔ∏è–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á—ë—Ç–∫–æ –≤–∏–¥–Ω—ã:\n"
            "‚Äî –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
            "‚Äî –°—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è\n"
            "‚Äî –°—É–º–º–∞\n"
            "‚Äî –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            "‚¨áÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
        )

        await state.finish()  # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–µ–∫–∞
        user_state = FSMContext(storage=state.storage, chat=user_id, user=user_id)
        await user_state.set_state(VerificationFSM.waiting_payment_proof)

        await msg.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))

    @dp.message_handler(lambda msg: msg.text.startswith("üí∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"), user_id=OPERATORS)
    async def show_payment_list(msg: types.Message, state: FSMContext):
        queue = get_pending_verifications("paid_waiting")
        if not queue:
            await msg.answer("üì≠ –ù–µ—Ç –æ–ø–ª–∞—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for uid in queue:
            kb.add(KeyboardButton(f"–û–ø–ª–∞—Ç–∞: {uid}"))
        kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        await state.set_state("awaiting_payment_selection")
        await msg.answer("üíµ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:", reply_markup=kb)

    @dp.message_handler(lambda msg: msg.text.startswith("–û–ø–ª–∞—Ç–∞:"), state="awaiting_payment_selection", user_id=OPERATORS)
    async def select_payment_user(msg: types.Message, state: FSMContext):
        try:
            user_id = int(msg.text.replace("–û–ø–ª–∞—Ç–∞:", "").strip())
        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        verification = get_verification_data(user_id)
        if not verification or not verification["payment_proof"]:
            await msg.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —á–µ–∫–∞.")
            return

        await state.update_data(current_user=user_id)

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", "üîô –ù–∞–∑–∞–¥")

        proof_path = verification["payment_proof"]
        if proof_path.lower().endswith((".jpg", ".jpeg", ".png", ".webp")):
            await msg.bot.send_photo(msg.chat.id, open(proof_path, "rb"), caption="üíµ –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ")
        else:
            await msg.bot.send_document(msg.chat.id, open(proof_path, "rb"), caption="üíµ –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ")

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        await state.set_state("processing_payment_user")

    @dp.message_handler(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", state="processing_payment_user", user_id=OPERATORS)
    async def approve_payment(msg: types.Message, state: FSMContext):
        user_id = (await state.get_data())["current_user"]
        verification = get_verification_data(user_id)

        if is_verified(user_id) or get_verification_status(user_id) in ("video_ok", "finished"):
            set_verification_status(user_id, "finished")
            await msg.bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
        elif verification and verification.get("video") == "SKIP":
            set_verification_status(user_id, "finished")
            await msg.bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ, –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É. –û–∂–∏–¥–∞–π—Ç–µ.")
        else:
            set_verification_status(user_id, "video_waiting")

            await msg.bot.send_message(
                user_id,
                "üé• –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ:\n\n"
                "1. –î–µ—Ä–∂–∏—Ç–µ –≤ —Ä—É–∫–∞—Ö:\n"
                "   ‚Ä¢ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç (–ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ ID),\n"
                "   ‚Ä¢ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –∫–≤–∏—Ç–∞–Ω—Ü–∏–µ–π –æ–± –æ–ø–ª–∞—Ç–µ,\n"
                "   ‚Ä¢ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞—è–≤–∫–∏ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏.\n\n"
                "2. –ß—ë—Ç–∫–æ –ø—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ –≤—Å–ª—É—Ö:\n"
                "¬´–Ø, –ü–µ—Ç—Ä–æ–≤ –ü—ë—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á, –ø–æ–∫—É–ø–∞—é –∞–∫—Ç–∏–≤—ã –Ω–∞ —Å–∞–π—Ç–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞ bitcoinbox.io, –Ω–æ–º–µ—Ä –æ–±–º–µ–Ω–∞ ‚Ññ1234, "
                "–¥–ª—è —Å–≤–æ–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∑–∞ —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞. –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Å–∏—Ç –∏ –Ω–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω—è —ç—Ç–æ –¥–µ–ª–∞—Ç—å. "
                "–û –≤—Å–µ—Ö —Ä–∏—Å–∫–∞—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥—ë–Ω –∏ —Å–æ–≤–µ—Ä—à–∞—é —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.¬ª\n\n"
                "‚ö†Ô∏è –í–ê–ñ–ù–û:\n"
                "‚Ä¢ –í –∫–∞–¥—Ä–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤—ã ‚Äî –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ª–∏—Ü\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏ —á—ë—Ç–∫–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ª–∏—Ü–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                "‚Ä¢ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤, –º–∞—Å–æ–∫ –∏ –º–æ–Ω—Ç–∞–∂–∞\n"
                "‚Ä¢ –í–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –¥–µ–Ω—å –∑–∞–ø–∏—Å–∏\n\n"
                "üì© –ü–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Å—é–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
            )

            # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            user_state = FSMContext(storage=state.storage, chat=user_id, user=user_id)
            await user_state.set_state(VerificationFSM.waiting_video)

        await state.finish()
        await msg.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))

    @dp.message_handler(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", state="processing_payment_user", user_id=OPERATORS)
    async def reject_payment(msg: types.Message, state: FSMContext):
        await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:")
        await state.set_state("awaiting_payment_reject_reason")

    @dp.message_handler(state="awaiting_payment_reject_reason", user_id=OPERATORS)
    async def reject_payment_finish(msg: types.Message, state: FSMContext):
        reason = msg.text
        user_id = (await state.get_data())["current_user"]

        # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
        set_verification_status(user_id, "rejected", reason)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        await msg.bot.send_message(
            user_id,
            f"‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ?",
            reply_markup=get_retry_keyboard("üíµ –ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –∑–∞–Ω–æ–≤–æ")
        )

        # –ó–∞–≤–µ—Ä—à–∞–µ–º FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        await state.finish()
        await msg.answer("üìõ –û–ø–ª–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))

    @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state="*", user_id=OPERATORS)
    async def go_back(msg: types.Message, state: FSMContext):
        await state.finish()
        await msg.answer("‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(_get_counts()))


def _get_counts():
    return {
        "docs": get_pending_verifications_count("new"),
        "requisites": get_pending_verifications_count("docs_ok"),
        "payments": get_pending_verifications_count("paid_waiting"),
        "videos": get_pending_verifications_count("video_waiting"),
    }