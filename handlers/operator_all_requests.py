from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from config import OPERATORS
from database.db import get_all_verifications, delete_verification
from keyboards.reply_operator import get_operator_menu


def register_operator_all_requests(dp: Dispatcher):

    @dp.message_handler(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫", user_id=OPERATORS)
    async def show_all_requests(msg: types.Message, state: FSMContext):
        # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã
        exclude_statuses = ("finished", "rejected", "video_ok")
        all_data = get_all_verifications()
        active = [v for v in all_data if v["status"] not in exclude_statuses]

        if not active:
            await msg.answer("üì≠ –ù–µ—Ç –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞—è–≤–æ–∫.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for v in active:
            kb.add(KeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å: {v['user_id']} ({v['status']})"))
        kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))

        await state.set_state("awaiting_manual_delete")
        await msg.answer("üìã –í—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –∑–∞—è–≤–∫–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —É–¥–∞–ª–∏—Ç—å:", reply_markup=kb)

    @dp.message_handler(lambda msg: msg.text.startswith("üóë –£–¥–∞–ª–∏—Ç—å:"), state="awaiting_manual_delete", user_id=OPERATORS)
    async def delete_request(msg: types.Message, state: FSMContext):
        try:
            user_id = int(msg.text.split(":")[1].split("(")[0].strip())
        except Exception:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        delete_verification(user_id)
        await msg.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω–∞.")
        await show_all_requests(msg, state)

    @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state="awaiting_manual_delete", user_id=OPERATORS)
    async def back_to_menu(msg: types.Message, state: FSMContext):
        await state.finish()
        await msg.answer("‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu())
