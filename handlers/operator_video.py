from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from config import OPERATORS
from database.db import (
    get_pending_verifications,
    get_verification_data,
    set_verification_status,
    set_user_verified,
    get_pending_verifications_count,
    is_verified
    
)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from keyboards.reply_operator import get_operator_menu
from keyboards.reply_user import get_retry_keyboard, get_user_menu


def register_operator_video(dp: Dispatcher):

    @dp.message_handler(lambda msg: msg.text.startswith("üé• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏–¥–µ–æ"), user_id=OPERATORS)
    async def show_video_list(msg: types.Message, state: FSMContext):
        queue = list(set(get_pending_verifications("video_waiting")))
        if not queue:
            await msg.answer("üì≠ –ù–µ—Ç –≤–∏–¥–µ–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
            return

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for uid in queue:
            kb.add(KeyboardButton(f"–í–∏–¥–µ–æ: {uid}"))
        kb.add(KeyboardButton("üîô –ù–∞–∑–∞–¥"))
        await state.set_state("awaiting_video_selection")
        await msg.answer("üé• –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ:", reply_markup=kb)

    @dp.message_handler(lambda msg: msg.text.startswith("–í–∏–¥–µ–æ:"), state="awaiting_video_selection", user_id=OPERATORS)
    async def select_video_user(msg: types.Message, state: FSMContext):
        try:
            user_id = int(msg.text.replace("–í–∏–¥–µ–æ:", "").strip())
        except ValueError:
            await msg.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return

        verification = get_verification_data(user_id)
        if not verification or not verification["video"]:
            await msg.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–∏–¥–µ–æ.")
            return

        await state.update_data(current_user=user_id)

        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∏–¥–µ–æ", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", "üîô –ù–∞–∑–∞–¥")

        video_path = verification["video"]
        if video_path.lower().endswith((".mp4", ".mov", ".mkv")):
            await msg.bot.send_video(msg.chat.id, open(video_path, "rb"), caption="üé• –í–∏–¥–µ–æ –∫–ª–∏–µ–Ω—Ç–∞")
        else:
            await msg.bot.send_document(msg.chat.id, open(video_path, "rb"), caption="üé• –í–∏–¥–µ–æ –∫–ª–∏–µ–Ω—Ç–∞")

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        await state.set_state("processing_video_user")

    @dp.message_handler(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∏–¥–µ–æ", state="processing_video_user", user_id=OPERATORS)
    async def approve_video(msg: types.Message, state: FSMContext):
        data = await state.get_data()
        user_id = data["current_user"]

        set_verification_status(user_id, "video_ok")
        set_user_verified(user_id)

        await msg.bot.send_message(
            user_id,
            (
                "‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø–æ–ª–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º –∏ —Å–∫–æ—Ä–æ –≤–µ—Ä–Ω—ë–º—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º.\n\n"
                "‚ÑπÔ∏è –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –¥–ª—è –æ–±–º–µ–Ω–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ.\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!"
            ),
            reply_markup=get_user_menu(True)
        )

        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_user_menu(is_verified(msg.from_user.id)))
        await state.finish()

        counts = {
            "docs": get_pending_verifications_count("new"),
            "requisites": get_pending_verifications_count("docs_ok"),
            "payments": get_pending_verifications_count("paid_waiting"),
            "videos": get_pending_verifications_count("video_waiting"),
        }

        await msg.answer("‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(counts))

    @dp.message_handler(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", state="processing_video_user", user_id=OPERATORS)
    async def reject_video_start(msg: types.Message, state: FSMContext):
        await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ:")
        await state.set_state("awaiting_video_reject_reason")

    @dp.message_handler(state="awaiting_video_reject_reason", user_id=OPERATORS)
    async def reject_video_finish(msg: types.Message, state: FSMContext):
        reason = msg.text
        user_id = (await state.get_data())["current_user"]

        set_verification_status(user_id, "rejected", reason)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        await msg.bot.send_message(
            user_id,
            f"‚ùå –í–∏–¥–µ–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ?",
            reply_markup=get_retry_keyboard("üé• –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–Ω–æ–≤–æ")
        )

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        await state.finish()
        counts = {
            "docs": get_pending_verifications_count("new"),
            "requisites": get_pending_verifications_count("docs_ok"),
            "payments": get_pending_verifications_count("paid_waiting"),
            "videos": get_pending_verifications_count("video_waiting"),
        }
        await msg.answer("üìõ –í–∏–¥–µ–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(counts))

    @dp.message_handler(text="üîô –ù–∞–∑–∞–¥", state="*", user_id=OPERATORS)
    async def go_back(msg: types.Message, state: FSMContext):
        await state.finish()
        counts = {
            "docs": get_pending_verifications_count("new"),
            "requisites": get_pending_verifications_count("docs_ok"),
            "payments": get_pending_verifications_count("paid_waiting"),
            "videos": get_pending_verifications_count("video_waiting"),
        }
        await msg.answer("‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.", reply_markup=get_operator_menu(counts))