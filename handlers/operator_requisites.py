from aiogram import types
from aiogram.dispatcher import FSMContext, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from config import OPERATORS
from database.db import (
    get_all_requisites,
    add_requisite,
    update_requisite,
    delete_requisite,
    get_pending_verifications_count
)
from keyboards.reply_operator import get_operator_menu


def register_operator_requisites(dp: Dispatcher):

    @dp.message_handler(lambda msg: msg.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏", user_id=OPERATORS)
    async def manage_requisites(msg: types.Message, state: FSMContext):
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å", "üîô –ù–∞–∑–∞–¥")
        await msg.answer("üõ† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏:", reply_markup=kb)
        await state.set_state("manage_requisites")

    @dp.message_handler(lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç", state="manage_requisites", user_id=OPERATORS)
    async def add_requisite_start(msg: types.Message, state: FSMContext):
        await msg.answer("‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (label) —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:")
        await state.set_state("add_requisite_label")

    @dp.message_handler(state="add_requisite_label", user_id=OPERATORS)
    async def add_requisite_label(msg: types.Message, state: FSMContext):
        await state.update_data(new_label=msg.text)
        await msg.answer("üì® –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (details) —Ä–µ–∫–≤–∏–∑–∏—Ç–∞:")
        await state.set_state("add_requisite_details")

    @dp.message_handler(state="add_requisite_details", user_id=OPERATORS)
    async def add_requisite_details(msg: types.Message, state: FSMContext):
        data = await state.get_data()
        add_requisite(data["new_label"], msg.text)
        await msg.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
        await manage_requisites(msg, state)

    @dp.message_handler(lambda msg: msg.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", state="manage_requisites", user_id=OPERATORS)
    async def update_requisite_start(msg: types.Message, state: FSMContext):
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for r in get_all_requisites():
            kb.add(KeyboardButton(f"{r[0]}: {r[1]}"))
        kb.add("üîô –ù–∞–∑–∞–¥")
        await msg.answer("üîÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (–ø–æ ID):", reply_markup=kb)
        await state.set_state("select_requisite_update")

    @dp.message_handler(state="select_requisite_update", user_id=OPERATORS)
    async def update_requisite_select(msg: types.Message, state: FSMContext):
        if msg.text == "üîô –ù–∞–∑–∞–¥":
            await manage_requisites(msg, state)
            return
        try:
            req_id = int(msg.text.split(":")[0])
            await state.update_data(req_id=req_id)
            await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            await state.set_state("update_requisite_label")
        except:
            await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `1: –ù–∞–∑–≤–∞–Ω–∏–µ`.")

    @dp.message_handler(state="update_requisite_label", user_id=OPERATORS)
    async def update_requisite_label(msg: types.Message, state: FSMContext):
        await state.update_data(new_label=msg.text)
        await msg.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        await state.set_state("update_requisite_details")

    @dp.message_handler(state="update_requisite_details", user_id=OPERATORS)
    async def update_requisite_details(msg: types.Message, state: FSMContext):
        data = await state.get_data()
        update_requisite(data["req_id"], data["new_label"], msg.text)
        await msg.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
        await manage_requisites(msg, state)

    @dp.message_handler(lambda msg: msg.text == "‚ùå –£–¥–∞–ª–∏—Ç—å", state="manage_requisites", user_id=OPERATORS)
    async def delete_requisite_start(msg: types.Message, state: FSMContext):
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for r in get_all_requisites():
            kb.add(KeyboardButton(f"{r[0]}: {r[1]}"))
        kb.add("üîô –ù–∞–∑–∞–¥")
        await msg.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
        await state.set_state("select_requisite_delete")

    @dp.message_handler(state="select_requisite_delete", user_id=OPERATORS)
    async def delete_requisite_confirm(msg: types.Message, state: FSMContext):
        if msg.text == "üîô –ù–∞–∑–∞–¥":
            await manage_requisites(msg, state)
            return
        try:
            req_id = int(msg.text.split(":")[0])
            delete_requisite(req_id)
            await msg.answer("‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç —É–¥–∞–ª—ë–Ω.")
            await manage_requisites(msg, state)
        except:
            await msg.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `1: –ù–∞–∑–≤–∞–Ω–∏–µ`.")

    @dp.message_handler(lambda msg: msg.text == "üîô –ù–∞–∑–∞–¥", state="*", user_id=OPERATORS)
    async def go_back(msg: types.Message, state: FSMContext):
        await state.finish()
        counts = {
            "docs": get_pending_verifications_count("new"),
            "requisites": get_pending_verifications_count("docs_ok"),
            "payments": get_pending_verifications_count("paid_waiting"),
            "videos": get_pending_verifications_count("video_waiting"),
        }
        await msg.answer("‚Ü© –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_operator_menu(counts))
