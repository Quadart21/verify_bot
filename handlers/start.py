from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher import FSMContext

from config import OPERATORS
from utils.role_check import is_operator
from keyboards.reply_user import get_user_menu
from keyboards.reply_operator import get_operator_menu

from database.db import (
    add_user,
    is_user_verified,
    get_verification_data,
    get_pending_verifications_count
)


def register_start(dp: Dispatcher):
    @dp.message_handler(CommandStart(), state='*')
    async def start_cmd(message: types.Message, state: FSMContext):
        await state.finish()
        user_id = message.from_user.id

        add_user(user_id)
        args = message.get_args()

        if is_operator(user_id) and args:
            try:
                client_id_str, section = args.split("_")
                client_id = int(client_id_str)

                if section == "docs":
                    await open_docs_request(message, client_id, state)
                    return
                elif section == "payment":
                    await open_payment_request(message, client_id, state)
                    return
                elif section == "video":
                    await open_video_request(message, client_id, state)
                    return
            except:
                pass  # –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –æ–±—ã—á–Ω–æ–µ –º–µ–Ω—é

        if is_operator(user_id):
            counts = {
                "docs": get_pending_verifications_count("new"),
                "requisites": get_pending_verifications_count("docs_ok"),
                "payments": get_pending_verifications_count("paid_waiting"),
                "videos": get_pending_verifications_count("video_waiting"),
            }
            await message.answer("üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:", reply_markup=get_operator_menu(counts))
        else:
            verified = is_user_verified(user_id)
            await message.answer("üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=get_user_menu(verified))


async def open_docs_request(msg: types.Message, client_id: int, state: FSMContext):
    data = get_verification_data(client_id)
    if not data or not data["doc_photo"] or not data["selfie_photo"]:
        await msg.answer("‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
        return

    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

    await state.update_data(current_user=client_id)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", "üîô –ù–∞–∑–∞–¥")

    await msg.bot.send_photo(msg.chat.id, open(data["doc_photo"], "rb"), caption="üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
    await msg.bot.send_photo(msg.chat.id, open(data["selfie_photo"], "rb"), caption="ü§≥ –°–µ–ª—Ñ–∏")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await state.set_state("processing_document_user")


async def open_payment_request(msg: types.Message, client_id: int, state: FSMContext):
    data = get_verification_data(client_id)
    if not data or not data["payment_proof"]:
        await msg.answer("‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —á–µ–∫–∞.")
        return

    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

    await state.update_data(current_user=client_id)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", "üîô –ù–∞–∑–∞–¥")

    await msg.bot.send_photo(msg.chat.id, open(data["payment_proof"], "rb"), caption="üíµ –ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await state.set_state("processing_payment_user")


async def open_video_request(msg: types.Message, client_id: int, state: FSMContext):
    data = get_verification_data(client_id)
    if not data or not data["video"]:
        await msg.answer("‚ùå –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ.")
        return

    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

    await state.update_data(current_user=client_id)

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∏–¥–µ–æ", "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", "üîô –ù–∞–∑–∞–¥")

    await msg.bot.send_video(msg.chat.id, open(data["video"], "rb"), caption="üé• –í–∏–¥–µ–æ –∫–ª–∏–µ–Ω—Ç–∞")
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    await state.set_state("processing_video_user")
